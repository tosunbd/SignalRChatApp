@if (ConnectedUsers is not null && ConnectedUsers.Count > 0)
{
	@foreach (var user in ConnectedUsers)
	{
		@if (user.UserId != this.LogonUserId)
		{
			var unreadMessages = user.Messages.Count(
				m => m.Unread == false && 
				m.FromUserId != this.LogonUserId);

			<tr style="cursor: pointer; height: 30px"
			@key="user.ConnectionId" 
			@onclick="async () => await SelectUser(user.ConnectionId)">
				<td>@user.UserName</td>
				<td>
					@if (unreadMessages > 0)
					{
						<div class="unread-indicator">
							@unreadMessages
						</div>
					}
				</td>
			</tr>
		}
	}
}

@code {

	[Parameter]
	public List<ConnectedUser>? ConnectedUsers { get; set; }

	[Parameter]
	public string? LogonUserId { get; set; }

	[Parameter]
	public EventCallback<ConnectedUser> OnUserSelected { get; set; }


	private async Task SelectUser(string? connectionId)
	{
		var targetUser = ConnectedUsers?.FirstOrDefault(u => u.ConnectionId == connectionId);

		if(targetUser is not null)
		{
			await OnUserSelected.InvokeAsync(targetUser);
		}
	}

}
