@page "/"

<PageTitle>Chat App</PageTitle>

@if (string.IsNullOrWhiteSpace(userName))
{
	<UserInfoCollectionComponent OnUserInfoSaved="@OnUserInfoProvided" />
}
else
{
	<div class="row">
		<div class="col-4">
			<table style="width: 100%">				
				<ConnectedUserComponent 
				ConnectedUsers="this.connectedUsers" 
				LogonUserId="@this.userId" 
				OnUserSelected="OnUserSelected" />				
			</table>			
		</div>
		<div class="col-8">
			<ChatComponent 
			FromUserId="@this.userId" 
			ToUser="targetUser"
			ConnectedUsers="this.connectedUsers"
			hubConnection="this.hubConnection" />
			@if (systemMessages is not null && systemMessages.Count > 0)
			{
				<ul>
					@foreach (var message in systemMessages)
					{
						<li>@message</li>
					}
				</ul>
			}
		</div>
	</div>


}

@code {

	private List<string> systemMessages = new List<string>();
	private string userName = string.Empty;
	private string userId = string.Empty;

	private HubConnection? hubConnection;

	private ConnectedUser? targetUser;

	private List<ConnectedUser> connectedUsers = new List<ConnectedUser>();

	private async Task OnUserInfoProvided(UserInfoCollectionComponent.UserInfo userInfo)
	{
		userName = userInfo.UserName;
		userId = Guid.NewGuid().ToString();

		await ConnectToServer(userId, userName);
	}

	private async Task OnUserSelected(ConnectedUser toUser)
	{
		this.targetUser = toUser;
	}


	private async Task ConnectToServer(string userId, string userName)
	{
		hubConnection = new HubConnectionBuilder()
			// .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
			.WithUrl($"https://localhost:7289/chathub?userId={userId}&userName={userName}")
			.Build();

		hubConnection.On<string>("ReceiveSystemMessage", ReceiveSystemMessage);
		hubConnection.On<List<ConnectedUser>>("UpdatedUserList", UpdatedUserList);
		hubConnection.On<string, string, string>("ReceiveMessage", ReceiveMessage);

		await hubConnection.StartAsync();
	}

	private void ReceiveSystemMessage(string message)
	{
		if(!string.IsNullOrEmpty(message))
		{
			systemMessages.Add(message);
			StateHasChanged();
		}
		Console.WriteLine(message);
	}

	private void UpdatedUserList(List<ConnectedUser> users)
	{
		if(users is not null && users.Count > 0)
		{
			connectedUsers = users;
			StateHasChanged();
		}
	}

	private void ReceiveMessage(string fromUserId, string fromConnectionId, string message)
	{		
		if (!string.IsNullOrWhiteSpace(fromConnectionId))
		{
			var fromUser = connectedUsers.FirstOrDefault(u => u.ConnectionId == fromConnectionId);

			if (fromUser is not null)
			{
				fromUser.Messages.Add(new ChatMessage
				{
					FromUserId = fromUserId,
					ToUserId = this.userId,
					Message = message
				});

				StateHasChanged();
			}
		}		
	}

}